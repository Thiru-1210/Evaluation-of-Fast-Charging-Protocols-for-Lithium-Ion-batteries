import pybamm
import numpy as np
import matplotlib.pyplot as plt

options = {"thermal": "lumped"}
model = pybamm.lithium_ion.DFN(options=options)

parameter_values = pybamm.ParameterValues("Chen2020")
parameter_values.update({"Initial temperature [K]": 298.15})

# Define your sets of I values
I_values = [(2.0, 1.5, 1.0, 0.5), (1.9, 1.4, 0.9, 0.4), (1.8, 1.3, 0.8, 0.3)]

# For SoC
SOC = 0.25  # For each stage

# Time for each stage using the formula: t = (SoC) * C / I
C = parameter_values["Nominal cell capacity [A.h]"]

fig, ax = plt.subplots(3, 1, figsize=(6, 12))

for I in I_values:
    I1, I2, I3, I4 = I
    T1 = SOC * C / I1  # Time for Stage 1 in hours
    T2 = SOC * C / I2  # Time for Stage 2 in hours
    T3 = SOC * C / I3  # Time for Stage 3 in hours
    T4 = SOC * C / I4  # Time for Stage 4 in hours

    # Hours to minutes
    T1 *= 60
    T2 *= 60
    T3 *= 60
    T4 *= 60

    experiment = pybamm.Experiment(
        [
            (
                f"Discharge at C/1 for 57 minutes",
                f"Charge at {I1}C for {T1} minutes or until 4.1 V",  # Stage 1
                f"Charge at {I2}C for {T2} minutes or until 4.1 V",  # Stage 2
                f"Charge at {I3}C for {T3} minutes or until 4.1 V",  # Stage 3
                f"Charge at {I4}C for {T4} minutes or until 4.1 V",  # Stage 4
                "Hold at 4.1 V until 0.50 mA",  # CV
            )
        ]
    )

    sim = pybamm.Simulation(model, experiment=experiment, parameter_values=parameter_values)
    solution = sim.solve()
    discharge_time = 60 * 60  # 1 hour

    # Create a mask for the charging time
    charging_time = solution["Time [s]"].entries >= discharge_time

    ax[0].plot(solution["Time [s]"].entries[charging_time], solution["Terminal voltage [V]"].entries[charging_time], label=f'{I}')
    ax[1].plot(solution["Time [s]"].entries[charging_time], solution["Current [A]"].entries[charging_time], label=f'{I}')
    ax[2].plot(solution["Time [s]"].entries[charging_time], solution["X-averaged cell temperature [K]"].entries[charging_time] - 273.15, label=f'{I}')

ax[0].set_xlabel('Time [s]')
ax[0].set_ylabel('Voltage [V]')
ax[0].legend()

ax[1].set_xlabel('Time [s]')
ax[1].set_ylabel('Current [A]')
ax[1].legend()

ax[2].set_xlabel('Time [s]')
ax[2].set_ylabel('Cell Temperature [C]')
ax[2].legend()

plt.tight_layout()
plt.show()
